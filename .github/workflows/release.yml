name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Extract version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/v}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Cargo.toml version
      run: |
        sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.version }}"/' Cargo.toml

    - name: Build release binaries
      run: |
        # Build for multiple targets
        rustup target add x86_64-unknown-linux-gnu
        rustup target add x86_64-pc-windows-msvc
        rustup target add x86_64-apple-darwin
        rustup target add aarch64-apple-darwin

        cargo build --release --target x86_64-unknown-linux-gnu
        cargo build --release --target x86_64-pc-windows-msvc
        cargo build --release --target x86_64-apple-darwin
        cargo build --release --target aarch64-apple-darwin

    - name: Generate Changelog
      id: changelog
      run: |
        # Generate changelog from git history
        echo "## Changes" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        git log --oneline --since="1 month ago" >> CHANGELOG.md || echo "No recent changes" >> CHANGELOG.md

    - name: Create Release Archive (Linux)
      run: |
        cd target/x86_64-unknown-linux-gnu/release
        tar -czf ../../../recog-linux-x86_64.tar.gz .

    - name: Create Release Archive (Windows)
      run: |
        cd target/x86_64-pc-windows-msvc/release
        7z a ../../../recog-windows-x86_64.zip .

    - name: Create Release Archive (macOS Intel)
      run: |
        cd target/x86_64-apple-darwin/release
        tar -czf ../../../recog-macos-x86_64.tar.gz .

    - name: Create Release Archive (macOS Apple Silicon)
      run: |
        cd target/aarch64-apple-darwin/release
        tar -czf ../../../recog-macos-aarch64.tar.gz .

    - name: Generate checksums
      run: |
        sha256sum recog-*.tar.gz recog-*.zip > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          recog-*.tar.gz
          recog-*.zip
          checksums.txt
        generate_release_notes: true
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.version.outputs.version, 'alpha') || contains(steps.version.outputs.version, 'beta') || contains(steps.version.outputs.version, 'rc') }}

  publish:
    name: Publish to Crates.io
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && !github.event.release.prerelease

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: release

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
