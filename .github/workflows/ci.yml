name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - 1.70.0  # MSRV
        features:
          - ""
          - "--features async"
          - "--all-features"

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.features }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose ${{ matrix.features }}

    - name: Run tests
      run: cargo test --verbose ${{ matrix.features }}

    - name: Run comprehensive tests
      run: cargo test --verbose --features async comprehensive_tests ${{ matrix.features }}

    - name: Test examples
      run: cargo run --example plugin_demo ${{ matrix.features }}

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install criterion
      run: cargo install cargo-criterion

    - name: Run fingerprint matching benchmarks
      run: cargo bench --bench fingerprint_matching -- --output-format bencher | tee benchmark-results.txt

    - name: Run XML loading benchmarksG
      run: cargo bench --bench xml_loading -- --output-format bencher | tee -a benchmark-results.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark-results.txt

    - name: Store benchmark results
      run: |
        echo "## Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat benchmark-results.txt >> $GITHUB_STEP_SUMMARY

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Run cargo-deny (if available)
      run: |
        if cargo install cargo-deny; then
          cargo deny check
        else
          echo "cargo-deny not available, skipping license/ban checks"
        fi
      continue-on-error: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-docs-${{ hashFiles('**/Cargo.lock') }}

    - name: Build documentation
      run: cargo doc --all-features --no-deps

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: target/doc

    - name: Check if README is up to date
      run: |
        # Basic check that README contains current version info
        grep -q "recog-rs" README.md || (echo "README might need updating" && exit 1)

  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    needs: [test, benchmark, security]
    if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release:')

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --all-features

    - name: Run tests on target
      run: cargo test --release --target ${{ matrix.target }} --all-features

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: recog-${{ matrix.target }}
        path: target/${{ matrix.target }}/release/

    - name: Create release archive
      run: |
        cd target/${{ matrix.target }}/release
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a ../../../recog-${{ matrix.target }}.zip .
        else
          tar -czf ../../../recog-${{ matrix.target }}.tar.gz .
        fi

    - name: Upload release archives
      uses: actions/upload-artifact@v4
      with:
        name: recog-archives
        path: |
          recog-*.tar.gz
          recog-*.zip

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov

    - name: Generate coverage report
      run: cargo llvm-cov --all-features --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: lcov.info
        fail_ci_if_error: false

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'push'

    steps:
    - uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Check for outdated dependencies
      run: |
        cargo install cargo-outdated
        cargo outdated --exit-code 1 || echo "Some dependencies may be outdated"

    - name: Check for security vulnerabilities
      run: |
        cargo install cargo-audit
        cargo audit --ignore-yanked
